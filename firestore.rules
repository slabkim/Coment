rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /titles/{titleId} {
      allow read: if true;
      allow write: if false;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    match /titles/{titleId}/reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /favorites/{favoriteId} {
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replyCount', 'likeCount'])
      );
    }

    match /comment_likes/{likeId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow update: if false;
    }

    match /reading_status/{statusId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /follows/{followId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.followerId || 
        request.auth.uid == resource.data.followingId
      );
      allow create: if request.auth != null && request.resource.data.followerId == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid == resource.data.followerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.followerId;
    }

    match /chats/{chatId} {
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow delete: if false;
    }

    match /chat_messages/{messageId} {
      allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants;
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.participants;
      allow update: if request.auth != null && request.auth.uid == resource.data.senderId;
      allow delete: if false;
    }

    match /user_recommendations/{recommendationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.fromUserId || 
        request.auth.uid == resource.data.toUserId
      );
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid == resource.data.toUserId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.fromUserId;
    }

    match /forums/{forumId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.creatorId == request.auth.uid;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.creatorId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'memberCount', 'lastMessage', 'lastMessageTime', 'lastMessageSenderId', 'lastMessageSenderName'])
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    match /forum_messages/{messageId} {
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/forums/$(resource.data.forumId)).data.members;
      allow create: if request.auth != null && 
        request.resource.data.senderId == request.auth.uid &&
        request.auth.uid in get(/databases/$(database)/documents/forums/$(request.resource.data.forumId)).data.members;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.senderId ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'readBy'])
      );
      allow delete: if false;
    }
  }
}


